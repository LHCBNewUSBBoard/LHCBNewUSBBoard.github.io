{
    "docs": [
        {
            "location": "/",
            "text": "1. Introduction\n\n\nThis article contains all the informations about the New USBBoard for SiPM detectors readout, including the basic introductions about the SiPM detectors, the development process, the operation manual and related bug issues. This article is also the summary of my three months work in EPFL.\n\n\nIf you have any problem, please contact \nhongming\n.\n\n\n\n\nSystem Structure\n        - Basic informations about the SiPM detectors \n its readout.\n\n\nDevelopment Process\n - The introduction of the readout board, includes hardware, firmware and software.\n\n\nOperation Manual\n        - The operations needed to set up an experiment and the usage of all tools.\n\n\nBug Issues \n Freq Asks\n- Record all the bugs happened in the experiments and the methods of solving them.\n\n\n\n\n2. Reference",
            "title": "USBBoard for SiPM readout"
        },
        {
            "location": "/#1-introduction",
            "text": "This article contains all the informations about the New USBBoard for SiPM detectors readout, including the basic introductions about the SiPM detectors, the development process, the operation manual and related bug issues. This article is also the summary of my three months work in EPFL.  If you have any problem, please contact  hongming .   System Structure         - Basic informations about the SiPM detectors   its readout.  Development Process  - The introduction of the readout board, includes hardware, firmware and software.  Operation Manual         - The operations needed to set up an experiment and the usage of all tools.  Bug Issues   Freq Asks - Record all the bugs happened in the experiments and the methods of solving them.",
            "title": "1. Introduction"
        },
        {
            "location": "/#2-reference",
            "text": "",
            "title": "2. Reference"
        },
        {
            "location": "/System_Structure/",
            "text": "1. Scintillating Fibre Tracker\n\n\n\n\n1.1 Plastic Scintillating fibres\n\n\nPlastic scintillating fibres (PSF or SciFi) technology allows building intrinsically fast, low mass detectors with a high degree of geometrical adaptability, which have two functions:\n\n\n\n\nthey convert the ionisation deposited by charged particles to optical photons\n\n\nthey transport the optical signal to the readout devices which, in order to minimise the material budget, are often located outside the active volume\n\n\n\n\nConstitution\n\n\nA plastic scintillating fibre consists of a core, typically made of polystyrene (n = 1.59), and a\nthin cladding, made from polymers with lower refractive index, e.g. PMMA (plexiglass, n = 1.49)\nor a special fluorinated polymer (n = 1.42). The thickness of the cladding layer is typically 3% of\nthe total diameter.\n\n\nSignal Generation\n\n\nSignal generation in a PSF is a multi-step process. Ionisation energy deposited in the core of the fibre leads to excitation of molecular levels (specifically of the so-called \u03c0 electrons) in the benzene rings of the polymer chain. The relaxation time and scintillation light yield of polystyreneare however poor. An organic fluorescent dye with matched excitation energy levels is added to the polystyrene base (\u223c1% by weight) to improve the efficiency of the scintillation mechanism.\n\n\nEnergy is transferred quite rapidly (sub-ns) from the base to this \u2019activator\u2019 dye by means of a non-radiative dipole-dipole transmission, known as the F\u00f6rster transfer, where the excited energy state of the dye will subsequently relax by emission of a photon. The activator dye is chosen to have a high quantum efficiency (\n 95%), a particular emission wavelength spectra, and fast decay time (less than a few ns). Often, a second wavelength shifting dye is admixed (\u223c0.05% by weight) which absorbs the photons from the activator (blue or UV) and remits them (isotropically) at longer wavelength (blue-green). In this wavelength range, the probability of re-absorption by the dyes is reduced and the photons profit from a generally better transparency of the polystyrene.\n\n\nLight Transport\n\n\nLight transport in the fibre relies primarily on total internal reflection at the interface between the fibre core and the cladding structure. Meridional rays, i.e. those crossing the fibre axis, are totally reflected if their angle of incidence relative to the surface normal exceeds the critical angle \u03b8 \n crit \n = arcsin(n \n clad \n /n \n core \n ). The corresponding solid angle element also called trapping fraction, describes the fraction of isotropically emitted photons which will be transported towards one end of the fibre. For round fibres with a single cladding (n \n core \n = 1.59, n \n clad \n = 1.49), this fraction is 3.1%. With a second fluorinated cladding (n \n clad, fluor \n = 1.42),\nthe fraction is increased to 5.3%. In practice, the trapping fraction is slightly larger, as also helical\npaths and light reflected at the cladding-air interface contribute, however only over relatively short transport distances.\n\n\n\n\nLight transported along a fibre is attenuated following, in first approximation, an exponential law I = I\n0\n\u00b7e\n\u2212z/\u039b\natt\n . The attenuation length \u039b has various wavelength dependent contributions \u039b\n1\n(\u03bb), \u039b\n2\n(\u03bb) etc. which can be attributed to different phenomena like Rayleigh scattering, self absorption by the dyes and radiation induced defects. Essentially all effects show increased attenuation for short wavelength (blue, UV). Consequently, the emission spectrum of a fibre looses first its short component and therefore shifts towards longer, i.e. green and red, wavelengths. Particularly for long fibres this aspect has to be considered when selecting the optimum photosensor. Typical values for the attenuation length are of the order \u039b att =3 ~ 5 m, averaged over the sensitivity window of a typical photosensor (400 ~ 600 nm)\n\n\nRadiation Tolerance of the Fibre\n\n\nThe decrease in light yield from irradiated plastic scintillators is attributed to two major causes:\n\n\n\n\ndegraded transmission properties of the base plastic\n\n\na degradation of the scintillating fluors.\n\n\n\n\nThe second cause can usually be avoided by the choice of robust fluors that are added to the base scintillator material. Typically one or two stable compounds with large Stoke shifts and good quantum\nefficiency are chosen.\n\n\nThe degraded optical transmission of the base plastic, typically polystyrene (PS), is a result of the creation of additional scattering and absorption centres produced during irradiation. These light loss centres are macromolecule radicals produced in the polymer under ionizing radiation. The increased attenuation of the light is stronger in the blue wavelengths with less effect in the green. To reduce the impact of this effect, the radiation hardness of scintillating fibres can be improved by choosing additional scintillating dyes with large Stoke\u2019s shifts. It has also been observed that there is a radiation dose rate effect on the creation of certain types of attenuation centres which are dependent on the availability of oxygen within the fibre for production. Additionally, different types of attenuation centres have also been observed to decay over time, with time constants depending on the radical type and, for certain other types, the abundance of oxygen within the polystyrene matrix that can aid in annealing.\n\n\nAs such, the total effect on the loss of light transmission depends on the particular environment within which the fibre is located, as well as the ionization rate to which the fibres are exposed.\n\n\n1.2 Silicon Photo Multiplier SiPM\n\n\nThe SiPM is a silicon based photo detector, which is fast, compact and single photon sensitive.\n\n\nConstitution \n Signals\n\n\nSiPM consists of many microscopic avalanche photon detectors (APDs) with typical sizes from 20 \u00d7 20 to 60 \u00d7 60 \u03bcm\n2\n , called pixels and connected in parallel to a macroscopic (few mm\n2\narea) channel. Each pixel is operated in Geiger Muller mode such that a single photon on the pixel will trigger a complete discharge (avalanche) with the release of the full charge. The discharge stops as the current is drawn via a quench resistor and the cell then recharges. The total signal of a SiPM is the sum of the charge of all triggered pixels.  SiPMs are operated at 2-3 volts overvoltage. Given an internal pixel capacitance C pixel of typically 50 fF, the charge collected for one photoelectron signal is approximately 1.2 pC (equivalent to \u2248 7.5 \u00b7 10\n5\n electrons). The SiPM offers a very fast response with a typical rise time of 3-5 ns. The dynamic range is determined by the finite number of pixels.\n\n\n\n\nSignal Gain\n\n\nThe charge produced in a single pixel corresponds to the gain G = Q/e. The gain depends on the surface of the pixel, the thickness of the amplification region which determines the capacity and the operation voltage above the avalanche limit (\u2206V ): G=C\u00b7\u2206V/e. Different technologies will provide gains for 50 \u00d7 50 \u03bcm\n2\n a pixels from 10\n6\n to 10\n7\n.\n\n\nNoise \n Dark Count Rate\n\n\nImpurities and thermal generation of free charges are responsible for a permanent rate of avalanches that are not induced by photons. This results in a Dark Count Rate (DCR) which is typically of the order of several 100 kHz/mm\n2\n. For SciFi applications, detection of single photons is required. With a detection threshold set to 0.5 PE, a dark noise signal is a priori indistinguishable from a photon induced signal.\n\n\nOther noise sources are the after-pulses which are due to temporarily trapped charges near the avalanche region. The after-pulses occur delayed after the primary avalanche, i.e. at a time when the pixel is usually still recovering. Their amplitude depends therefore on the delay and is generally smaller than a single PE pulse. A very significant effect for SciFi applications is the optical cross talk (x-talk). During the avalanche in a pixel, a large number of Infrared Radiation photons are produced. Silicon is is largely transparent to IR and allows these photons to reach neighbouring pixels and trigger there secondary avalanches. X-talk produces signals at the same time as the primary avalanche. Over the past decade, the SiPM manufacturers have made significant progress in reducing the DCR by material and design optimizations. The best devices show now at room temperature f\nDCR\n =100 kHz/mm\n2\n.\n\n\nLike other silicon devices, SiPM are sensitive to the so-called Non Ionising Energy Loss (NIEL) which leads to damage of the silicon lattice and as a consequence a large increase of the DCR and the associated leakage current. The DCR increases linearly with the particle fluence (usually expressed in the number of 1 MeV neutron equivalent particles per cm\n2\n) and rapidly reaches levels where the initial DCR is insignificant. In a SciFi tracker, where single photon sensitivity must be maintained, the DCR can only be coped with by reducing the operational temperature which reduces it by a factor 2 typically every 10 K.\n\n\n1.3 Fibre Mat \n LHC SciFi Tracker\n\n\nBlue emitting scintillating plastic fibres of type SCSF-78MJ from Kuraray with 250 \u03bcm diameter are arranged in a staggered close-packed geometry to 6-layer fibre mats. The mats are 2.4 m long and mirror coated at the non-read end. The scintillation light exiting at the other end is detected by linear arrays of SiPM detectors (128 channels of 0.25 x 1.6 mm\n2\n size). The height of a SiPM channel (1.6 mm) extends over all 6 layers of the fibre mat. The pitch (0.25 mm) allows resolving the clusters of hit fibres of typically 2 or 3 channels width.\n\n\n\n\nThe combination of small diameter scintillating plastic fibres with arrays of SiPM photodetectors has lead to a new class of SciFi trackers usable at high luminosity collider experiments. The LHCb SciFi Tracker is part of a major upgrade campaign of the LHCb detector to allow operation during the LHC Run 3, i.e. from 2019 onward, at a levelled luminosity of 2 \u00d7 10\n33\ncm\n\u22122\ns\n\u22121\n and at a readout rate of 40 MHz (bunch crossings every 25 ns). It consists of three tracking stations with four independent planes each (X-U-V-X, stereo angle \u00b15\n\u25e6\n) and extends over 6 m in width and 4.8 m in height, as seen in Figure 4.\n\n\n\n\n\n\n2. Electronics Readout\n\n\n\n\n2.1 Flex\n\n\nThe scintillating fibre ribbons are connected to the SiPM arrays, which in turn are connected to the front-end electronics through flex-PCB cables with a length of about 100 mm, as shown in Fig. 3.40.  The flexibility is required to make a 90 degree bend in order to connect the SiPMs to the Front-end (FE) boards located outside the cold volume. Cooling pipes for a liquid cooling system must also be fed through this enclosure to keep the silicon photo-detectors at -40 degree. Each detector is mounted on a separate flex-PCB and attached with connectors to the FE board.\n\n\n\n\nAn aluminium stiffener is glued to the back side of the detector region where it allows a good thermal contact to be made with the cooling pipe. The stiffeners also play a role of \u201cheat spreaders\u201d, providing a uniform temperature profile over a SiPM array. If required, the stiffener could also be implemented with a material that matches the detector substrate. A passive temperature sensor (NTC or PT1000) is mounted on the back side of the detector where a cut-out in the stiffener is foreseen. The temperature sensor is connected via the flex-PCB to the FE board and can be accessed by the slow control.  The temperature di\u21b5erence between detectors on the same super-array needs to be within 1K to ensure good gain uniformity while using only one bias voltage per super-array. The bias voltage (~60V/1mA) is provided via the flex-PCB to the detector.\n\n\n2.2 SpirocA\n\n\nSPIROC is an auto-triggered, bi-gain, 36-channel ASIC which allows to measure on each channel the charge from one photoelectron to 2000 and the time with a 100ps accurate TDC.  The integrated ASIC components allow 16 selectable pre-amplification gain factors (with output gain values from 3 to 100 mV/pC), and seven CR(RC)\n2\n shaping times from 25 to 175 ns. After shaping, the signal is held (under the control of signal hold) at its maximum amplitude with a track and hold method. An analogue memory array with a depth of 16 for each channel is used to store the time information and the charge measurement. The data are then stored in a 4 kbytes RAM. An adjustable 8-bit DAC (0-4.5 V) in the ASIC allows individual adjustment of the SiPM forward voltage for each one of the 36 channels.\n\n\nA schematic view of a single channel of the ASIC chip is given below:\n\n\n\n2.3 NewUSBBoard\n\n\nUSBBoard is designed to control, digitize and readout multichannel readout ASICs for SiPM detectors.\n\n\nThe typical data acquisition setup is:\nThe small signal (typically 10\n6\n electrons per photo electron of the SiPM detectors) is pre-amplifiered and shaped through a integrated multichannel front-end chips, such as SpirocA or VATA64. The front-end ASIC acts as a signal amplifier and analog signal multiplexer and connects with the USBBoard through a uplink-cable. The ASIC is controlled via a simple protocol using a Hold, Shift, Clk and Analog_output signal. The Analog_output which is sampled under the control of Hold signal carries the data information from the SiPMs. The digital interface to control the output multiplexer is implemented via a local FPGA which acts as glue logic and signal interpreter between USBBoard Up-Link and ASIC digital interface.\n\n\nThe structure of the Front End ASIC is showed in the figure below.\n\n\n\n\nThe USBBoard is also responsible to send the AMS2 Up-link protocol and perform digitization via the ADC chips on board. Then the digital signal is stored in a FIFO in the FPGA, tagged with some event information (header) and passed to the host computer via QuickUSB module. The USBBoard has SPI control interfaces for parameter setup of the SPIROC chip and provides the low voltage power for the readout chip via Up-link interface. Also the bias voltage for the detector can be applied via USBBoard front panel connector. The USB board provides 8 Up-Link connectors which are all on the same power potential but isolated to the secondary electronics part responsible for the digital data acquisition via FPGA and USB interface.\n\n\n\n\nThe most important features and components of the board are given below, details of the NewUSBBoard hardware and firmware are in the Section \"Development Process\".\n\n\n\n\nUSB 2.0 interface based on a plug in module from QuickUSB, drivers and API for Labview and c-code are given by \nQuickUSB\n\n\nAn Altera CyclonIV FPGA (type EP4CE75F23I8L), core voltage 1.0V\n\n\n8 channels of 12-bit ADCs (type ADS803), the sampling clock is limited to 5MHz by the ADC, there is a pin compatible ADC reaching 20MHz (ADS805). Even the ADC sampling clock is set to 5MHz, the sample is only available with a delay of 6 clock cycles.\n\n\n8 Up-linkV3 Connectors. The connector provides the analog signal interface (2 analog signals out+ and out-), low voltage (+-2V), Bias voltage (GRING) and other control signals.\n\n\n2 SPI interface connectors, 6-pin for only 1 slave select, 8-pin for 4 save select\n\n\nFlash chip EPCS64 is used and the FPGA will be configured automatically after power on.\n\n\nThree different Front-end Board are supported, includes VA32, VA64 and SpirocA. Jumpers are needed to choose the right Front-end board.\n\n\n\n\n2.4 SciFi Module Readout\n\n\nThe SciFi Module Readout which is composed of SpirocA and NewUSBBoard is showed below:\n\n\n\n\nWe defined that one SciFi Module Readout System includes:\n\n1\u00d7USBBoard + 2\u00d7SpirocA Cards + 1\u00d7Adapter Cards\n\n\nOne SpirocA Card will have 8 SpirocA chips on board, each SpirocA can readout 32 channels, so one SpirocA Card will readout 256 channels in total.\n\nOne Single SciFi Module Readout System can readout up to 4 SiPMs, this corresponds to 1 Fibre Mat.\n\nEach SpirocA Card will be routed to 1 uplink on the USBBoard, which has a 12-bit ADC to sample and digitalize the signals.\n\nThe USBBoard have 8 uplinks, this means one USBBoard can readout 16 SiPMs, which corresponds to half of the SciFi Module.",
            "title": "System Structure"
        },
        {
            "location": "/System_Structure/#1-scintillating-fibre-tracker",
            "text": "",
            "title": "1. Scintillating Fibre Tracker"
        },
        {
            "location": "/System_Structure/#11-plastic-scintillating-fibres",
            "text": "Plastic scintillating fibres (PSF or SciFi) technology allows building intrinsically fast, low mass detectors with a high degree of geometrical adaptability, which have two functions:   they convert the ionisation deposited by charged particles to optical photons  they transport the optical signal to the readout devices which, in order to minimise the material budget, are often located outside the active volume   Constitution  A plastic scintillating fibre consists of a core, typically made of polystyrene (n = 1.59), and a\nthin cladding, made from polymers with lower refractive index, e.g. PMMA (plexiglass, n = 1.49)\nor a special fluorinated polymer (n = 1.42). The thickness of the cladding layer is typically 3% of\nthe total diameter.  Signal Generation  Signal generation in a PSF is a multi-step process. Ionisation energy deposited in the core of the fibre leads to excitation of molecular levels (specifically of the so-called \u03c0 electrons) in the benzene rings of the polymer chain. The relaxation time and scintillation light yield of polystyreneare however poor. An organic fluorescent dye with matched excitation energy levels is added to the polystyrene base (\u223c1% by weight) to improve the efficiency of the scintillation mechanism.  Energy is transferred quite rapidly (sub-ns) from the base to this \u2019activator\u2019 dye by means of a non-radiative dipole-dipole transmission, known as the F\u00f6rster transfer, where the excited energy state of the dye will subsequently relax by emission of a photon. The activator dye is chosen to have a high quantum efficiency (  95%), a particular emission wavelength spectra, and fast decay time (less than a few ns). Often, a second wavelength shifting dye is admixed (\u223c0.05% by weight) which absorbs the photons from the activator (blue or UV) and remits them (isotropically) at longer wavelength (blue-green). In this wavelength range, the probability of re-absorption by the dyes is reduced and the photons profit from a generally better transparency of the polystyrene.  Light Transport  Light transport in the fibre relies primarily on total internal reflection at the interface between the fibre core and the cladding structure. Meridional rays, i.e. those crossing the fibre axis, are totally reflected if their angle of incidence relative to the surface normal exceeds the critical angle \u03b8   crit   = arcsin(n   clad   /n   core   ). The corresponding solid angle element also called trapping fraction, describes the fraction of isotropically emitted photons which will be transported towards one end of the fibre. For round fibres with a single cladding (n   core   = 1.59, n   clad   = 1.49), this fraction is 3.1%. With a second fluorinated cladding (n   clad, fluor   = 1.42),\nthe fraction is increased to 5.3%. In practice, the trapping fraction is slightly larger, as also helical\npaths and light reflected at the cladding-air interface contribute, however only over relatively short transport distances.   Light transported along a fibre is attenuated following, in first approximation, an exponential law I = I 0 \u00b7e \u2212z/\u039b att  . The attenuation length \u039b has various wavelength dependent contributions \u039b 1 (\u03bb), \u039b 2 (\u03bb) etc. which can be attributed to different phenomena like Rayleigh scattering, self absorption by the dyes and radiation induced defects. Essentially all effects show increased attenuation for short wavelength (blue, UV). Consequently, the emission spectrum of a fibre looses first its short component and therefore shifts towards longer, i.e. green and red, wavelengths. Particularly for long fibres this aspect has to be considered when selecting the optimum photosensor. Typical values for the attenuation length are of the order \u039b att =3 ~ 5 m, averaged over the sensitivity window of a typical photosensor (400 ~ 600 nm)  Radiation Tolerance of the Fibre  The decrease in light yield from irradiated plastic scintillators is attributed to two major causes:   degraded transmission properties of the base plastic  a degradation of the scintillating fluors.   The second cause can usually be avoided by the choice of robust fluors that are added to the base scintillator material. Typically one or two stable compounds with large Stoke shifts and good quantum\nefficiency are chosen.  The degraded optical transmission of the base plastic, typically polystyrene (PS), is a result of the creation of additional scattering and absorption centres produced during irradiation. These light loss centres are macromolecule radicals produced in the polymer under ionizing radiation. The increased attenuation of the light is stronger in the blue wavelengths with less effect in the green. To reduce the impact of this effect, the radiation hardness of scintillating fibres can be improved by choosing additional scintillating dyes with large Stoke\u2019s shifts. It has also been observed that there is a radiation dose rate effect on the creation of certain types of attenuation centres which are dependent on the availability of oxygen within the fibre for production. Additionally, different types of attenuation centres have also been observed to decay over time, with time constants depending on the radical type and, for certain other types, the abundance of oxygen within the polystyrene matrix that can aid in annealing.  As such, the total effect on the loss of light transmission depends on the particular environment within which the fibre is located, as well as the ionization rate to which the fibres are exposed.",
            "title": "1.1 Plastic Scintillating fibres"
        },
        {
            "location": "/System_Structure/#12-silicon-photo-multiplier-sipm",
            "text": "The SiPM is a silicon based photo detector, which is fast, compact and single photon sensitive.  Constitution   Signals  SiPM consists of many microscopic avalanche photon detectors (APDs) with typical sizes from 20 \u00d7 20 to 60 \u00d7 60 \u03bcm 2  , called pixels and connected in parallel to a macroscopic (few mm 2 area) channel. Each pixel is operated in Geiger Muller mode such that a single photon on the pixel will trigger a complete discharge (avalanche) with the release of the full charge. The discharge stops as the current is drawn via a quench resistor and the cell then recharges. The total signal of a SiPM is the sum of the charge of all triggered pixels.  SiPMs are operated at 2-3 volts overvoltage. Given an internal pixel capacitance C pixel of typically 50 fF, the charge collected for one photoelectron signal is approximately 1.2 pC (equivalent to \u2248 7.5 \u00b7 10 5  electrons). The SiPM offers a very fast response with a typical rise time of 3-5 ns. The dynamic range is determined by the finite number of pixels.   Signal Gain  The charge produced in a single pixel corresponds to the gain G = Q/e. The gain depends on the surface of the pixel, the thickness of the amplification region which determines the capacity and the operation voltage above the avalanche limit (\u2206V ): G=C\u00b7\u2206V/e. Different technologies will provide gains for 50 \u00d7 50 \u03bcm 2  a pixels from 10 6  to 10 7 .  Noise   Dark Count Rate  Impurities and thermal generation of free charges are responsible for a permanent rate of avalanches that are not induced by photons. This results in a Dark Count Rate (DCR) which is typically of the order of several 100 kHz/mm 2 . For SciFi applications, detection of single photons is required. With a detection threshold set to 0.5 PE, a dark noise signal is a priori indistinguishable from a photon induced signal.  Other noise sources are the after-pulses which are due to temporarily trapped charges near the avalanche region. The after-pulses occur delayed after the primary avalanche, i.e. at a time when the pixel is usually still recovering. Their amplitude depends therefore on the delay and is generally smaller than a single PE pulse. A very significant effect for SciFi applications is the optical cross talk (x-talk). During the avalanche in a pixel, a large number of Infrared Radiation photons are produced. Silicon is is largely transparent to IR and allows these photons to reach neighbouring pixels and trigger there secondary avalanches. X-talk produces signals at the same time as the primary avalanche. Over the past decade, the SiPM manufacturers have made significant progress in reducing the DCR by material and design optimizations. The best devices show now at room temperature f DCR  =100 kHz/mm 2 .  Like other silicon devices, SiPM are sensitive to the so-called Non Ionising Energy Loss (NIEL) which leads to damage of the silicon lattice and as a consequence a large increase of the DCR and the associated leakage current. The DCR increases linearly with the particle fluence (usually expressed in the number of 1 MeV neutron equivalent particles per cm 2 ) and rapidly reaches levels where the initial DCR is insignificant. In a SciFi tracker, where single photon sensitivity must be maintained, the DCR can only be coped with by reducing the operational temperature which reduces it by a factor 2 typically every 10 K.",
            "title": "1.2 Silicon Photo Multiplier SiPM"
        },
        {
            "location": "/System_Structure/#13-fibre-mat-lhc-scifi-tracker",
            "text": "Blue emitting scintillating plastic fibres of type SCSF-78MJ from Kuraray with 250 \u03bcm diameter are arranged in a staggered close-packed geometry to 6-layer fibre mats. The mats are 2.4 m long and mirror coated at the non-read end. The scintillation light exiting at the other end is detected by linear arrays of SiPM detectors (128 channels of 0.25 x 1.6 mm 2  size). The height of a SiPM channel (1.6 mm) extends over all 6 layers of the fibre mat. The pitch (0.25 mm) allows resolving the clusters of hit fibres of typically 2 or 3 channels width.   The combination of small diameter scintillating plastic fibres with arrays of SiPM photodetectors has lead to a new class of SciFi trackers usable at high luminosity collider experiments. The LHCb SciFi Tracker is part of a major upgrade campaign of the LHCb detector to allow operation during the LHC Run 3, i.e. from 2019 onward, at a levelled luminosity of 2 \u00d7 10 33 cm \u22122 s \u22121  and at a readout rate of 40 MHz (bunch crossings every 25 ns). It consists of three tracking stations with four independent planes each (X-U-V-X, stereo angle \u00b15 \u25e6 ) and extends over 6 m in width and 4.8 m in height, as seen in Figure 4.",
            "title": "1.3 Fibre Mat &amp; LHC SciFi Tracker"
        },
        {
            "location": "/System_Structure/#2-electronics-readout",
            "text": "",
            "title": "2. Electronics Readout"
        },
        {
            "location": "/System_Structure/#21-flex",
            "text": "The scintillating fibre ribbons are connected to the SiPM arrays, which in turn are connected to the front-end electronics through flex-PCB cables with a length of about 100 mm, as shown in Fig. 3.40.  The flexibility is required to make a 90 degree bend in order to connect the SiPMs to the Front-end (FE) boards located outside the cold volume. Cooling pipes for a liquid cooling system must also be fed through this enclosure to keep the silicon photo-detectors at -40 degree. Each detector is mounted on a separate flex-PCB and attached with connectors to the FE board.   An aluminium stiffener is glued to the back side of the detector region where it allows a good thermal contact to be made with the cooling pipe. The stiffeners also play a role of \u201cheat spreaders\u201d, providing a uniform temperature profile over a SiPM array. If required, the stiffener could also be implemented with a material that matches the detector substrate. A passive temperature sensor (NTC or PT1000) is mounted on the back side of the detector where a cut-out in the stiffener is foreseen. The temperature sensor is connected via the flex-PCB to the FE board and can be accessed by the slow control.  The temperature di\u21b5erence between detectors on the same super-array needs to be within 1K to ensure good gain uniformity while using only one bias voltage per super-array. The bias voltage (~60V/1mA) is provided via the flex-PCB to the detector.",
            "title": "2.1 Flex"
        },
        {
            "location": "/System_Structure/#22-spiroca",
            "text": "SPIROC is an auto-triggered, bi-gain, 36-channel ASIC which allows to measure on each channel the charge from one photoelectron to 2000 and the time with a 100ps accurate TDC.  The integrated ASIC components allow 16 selectable pre-amplification gain factors (with output gain values from 3 to 100 mV/pC), and seven CR(RC) 2  shaping times from 25 to 175 ns. After shaping, the signal is held (under the control of signal hold) at its maximum amplitude with a track and hold method. An analogue memory array with a depth of 16 for each channel is used to store the time information and the charge measurement. The data are then stored in a 4 kbytes RAM. An adjustable 8-bit DAC (0-4.5 V) in the ASIC allows individual adjustment of the SiPM forward voltage for each one of the 36 channels.  A schematic view of a single channel of the ASIC chip is given below:",
            "title": "2.2 SpirocA"
        },
        {
            "location": "/System_Structure/#23-newusbboard",
            "text": "USBBoard is designed to control, digitize and readout multichannel readout ASICs for SiPM detectors.  The typical data acquisition setup is:\nThe small signal (typically 10 6  electrons per photo electron of the SiPM detectors) is pre-amplifiered and shaped through a integrated multichannel front-end chips, such as SpirocA or VATA64. The front-end ASIC acts as a signal amplifier and analog signal multiplexer and connects with the USBBoard through a uplink-cable. The ASIC is controlled via a simple protocol using a Hold, Shift, Clk and Analog_output signal. The Analog_output which is sampled under the control of Hold signal carries the data information from the SiPMs. The digital interface to control the output multiplexer is implemented via a local FPGA which acts as glue logic and signal interpreter between USBBoard Up-Link and ASIC digital interface.  The structure of the Front End ASIC is showed in the figure below.   The USBBoard is also responsible to send the AMS2 Up-link protocol and perform digitization via the ADC chips on board. Then the digital signal is stored in a FIFO in the FPGA, tagged with some event information (header) and passed to the host computer via QuickUSB module. The USBBoard has SPI control interfaces for parameter setup of the SPIROC chip and provides the low voltage power for the readout chip via Up-link interface. Also the bias voltage for the detector can be applied via USBBoard front panel connector. The USB board provides 8 Up-Link connectors which are all on the same power potential but isolated to the secondary electronics part responsible for the digital data acquisition via FPGA and USB interface.   The most important features and components of the board are given below, details of the NewUSBBoard hardware and firmware are in the Section \"Development Process\".   USB 2.0 interface based on a plug in module from QuickUSB, drivers and API for Labview and c-code are given by  QuickUSB  An Altera CyclonIV FPGA (type EP4CE75F23I8L), core voltage 1.0V  8 channels of 12-bit ADCs (type ADS803), the sampling clock is limited to 5MHz by the ADC, there is a pin compatible ADC reaching 20MHz (ADS805). Even the ADC sampling clock is set to 5MHz, the sample is only available with a delay of 6 clock cycles.  8 Up-linkV3 Connectors. The connector provides the analog signal interface (2 analog signals out+ and out-), low voltage (+-2V), Bias voltage (GRING) and other control signals.  2 SPI interface connectors, 6-pin for only 1 slave select, 8-pin for 4 save select  Flash chip EPCS64 is used and the FPGA will be configured automatically after power on.  Three different Front-end Board are supported, includes VA32, VA64 and SpirocA. Jumpers are needed to choose the right Front-end board.",
            "title": "2.3 NewUSBBoard"
        },
        {
            "location": "/System_Structure/#24-scifi-module-readout",
            "text": "The SciFi Module Readout which is composed of SpirocA and NewUSBBoard is showed below:   We defined that one SciFi Module Readout System includes: \n1\u00d7USBBoard + 2\u00d7SpirocA Cards + 1\u00d7Adapter Cards  One SpirocA Card will have 8 SpirocA chips on board, each SpirocA can readout 32 channels, so one SpirocA Card will readout 256 channels in total. \nOne Single SciFi Module Readout System can readout up to 4 SiPMs, this corresponds to 1 Fibre Mat. \nEach SpirocA Card will be routed to 1 uplink on the USBBoard, which has a 12-bit ADC to sample and digitalize the signals. \nThe USBBoard have 8 uplinks, this means one USBBoard can readout 16 SiPMs, which corresponds to half of the SciFi Module.",
            "title": "2.4 SciFi Module Readout"
        },
        {
            "location": "/Development_Process/",
            "text": "--------------Hardware--------------\n\n\n1.1 Development Tools \n Projects\n\n\nAltium Designer\n\n\nProjects listed below are developed with Altium Designer (Version 15.0.7):\n\n\n\n\nNewUSBBoard -- database/hardware/ADBV2\n\n\nNewUSBBoard piggyback  -- database/hardware/ADB-PiggybackV2.0\n\n\n\n\nCadence\n\n\nProject listed below are developed with Cadence:\n\n\n\n\nSpirocA board -- database/hardware/HPE-SPIROCA-256-LHCB\n\n\nLaser Driver board -- database/hardware/LaserDriver\n\n\nPACIFIC board\n\n\n\n\n\n\n--------------Firmware--------------\n\n\n2.1 Development Tools\n\n\nHDL Designer 2012.1\n\n\nDownload link: \nHDS_2012_1\n\n\nQuartus 12.0\n\n\nDownload link \nQuartus_12_0\n\n\n2.1 Development Process\n\n\nEdit Source Code\n\n\nDownload the souce code from https://bitbucket.org/\n\n\n\n\nMake a new directory D:\\NewUSBBoard\n\n\ncd D:\\NewUSBBoard\n\n\ngit clone https://lihm09@bitbucket.org/XiaoxueHAN/usbboard_firmware.git firmware\n\n\nSet the environment variables\n\n\nRun D:\\NewUSBBoard\\firmware\\Setup_Env\\SET_ENV_VAR.bat as Administrator.\n\n\nEdit source code in the HDL Designer.\n\n\n\n\nSynthesis in HDL Designer\n\n\nUSB_Board_TOP_tb-\nstruct-\nU_0 is the top file of the project.\n\nUSB_Board_TOP_tb-\nstruct-\nU_1 is the testbench, which can only be used for simulating.\n\n\n\n\nIn \u201cFPGA Technology Setup\u201d choose the options:\n\n\n\nIn \"FPGA Synthesis Settings\" choose the options:\n\n\n\nChoose U_0 and click \u201cGenerate and runs the entires Quartus QIS Synthesis flow\u201d to synthesis the project, then wait for Synthesis completed.\n\n\nImplementation in Quartus\n\n\n\n\n\n\nOpen Quartus and the project file PEBSino_USB_Board\\qis\\@u@s@b_@board_@t@o@p_struct\\USB_Board_TOP.qpf .\n\n\n\n\n\n\nRun the command below in the Tcl console, the file will set the type of the device and all the pin planning \n constrains.\n\n\n\n\nsource USB_Board_TOP.tcl\n\n\n\n\n\n\n\n\nStart compilation.\n\n\n\n\n\n\nProgram the FPGA\n\n\n\n\nUse JTAG and *.sof to program the FPGA for preliminary tests.\n\n\nUse ISP interface to program the flash  \n\n\nUse \"Convert Programming Files\" to generate .jic file to program the flash\n\n(flash device is EPCS64, FPGA device is EP4CE75F23I8L)  \n\n\nThe FPGA can also be programed using the software tools through QuickUSB module.\n\nUse \nhdReadoutTest ... -f\n to program the FPGA. (More details, try \nhdReadoutTest -h\n)\n\n\n\n\n\n\n--------------Software--------------\n\n\n3.1 Development Tools \n Chains\n\n\nOperation System:\n\n\n\n\nubuntu 12.04.3 amd64  \n\n\n\n\nPre-install Software:\n\n\n\n\ngit, g++, qt4, libusb, dkpg, make, gcc, binutils, libx11, libxpm, libxft, libxext, qt4, libusb\n\n\nsudo apt-get install git dpkg-dev make g++ gcc binutils libx11-dev libxpm-dev libxft-dev \\\nlibxext-dev libqt4-dev libusb-dev libaio.so.1\n\n\nFFTW\n\n\n\n\ndownload source code and unzip the file to /opt/  \n\n\nunder /opt/fftw-3.3.4, run \n./configure\n\n\nunder /opt/fftw-3.3.4, run \n./make\n\n\nunder /opt/fftw-3.3.4, run \nsudo ./make install\n\n\n\n\n\n\n\n\nrootV5.34/32\n\n\n\n\ndownload source code and unzip the file to /opt/  \n\n\nunder /opt/root, run \nsudo ./configure --enable-qt --with-fftw3-incdir=\"/opt/fftw-3.3.4/api\" --with-fftw3-libdir=\"/opt/fftw-3.3.4/.libs\"\n\n\nunder /opt/root run \nsudo make\n\n\n\n\n\n\n\n\nqtcreatorV2.8.1\n\n\n\n\nSource Code\n\n\n\n\n\n\nDownload source code from bitbucket\n\n\n\n\ngit clone https://lihm09@bitbucket.org/RomanGreim/scifiusbboard.git\n  \n\n\n\n\n\n\n\n\ninstall the QuicUSB Driver\n\n\n\n\ntar -xvf scifiusbboard/support/QuickUsbLibrary_v2.15.2_Linux.tar.gz\n\n\ncd scifiusbboard/support/QuickUsbLibrary_v2.15.2_Linux\n\n\nsudo ./install-linux.sh\n\n\n\n\n\n\n\n\nInstall libiowkit\n\n\n\n\ncd scifiusbboard/utils/lisProgrammer/libiowkit\n\n\n./configure\n\n\nmake\n\n\nsudo make install\n  \n\n\n\n\n\n\n\n\nCompilation\n\n\n\n\nqmake\n\n\nmake\n\n\n\n\n\n\n\n\n3.2 Qmake project\n\n\n\n\n*.pro/*.pri -- qmake project file\n\n\n*.h -- header file\n\n\n*.cpp -- cpp file\n\n\n*.ui -- ui file, edited by qtcreator",
            "title": "Development Process"
        },
        {
            "location": "/Development_Process/#-hardware-",
            "text": "",
            "title": "--------------Hardware--------------"
        },
        {
            "location": "/Development_Process/#11-development-tools-projects",
            "text": "Altium Designer  Projects listed below are developed with Altium Designer (Version 15.0.7):   NewUSBBoard -- database/hardware/ADBV2  NewUSBBoard piggyback  -- database/hardware/ADB-PiggybackV2.0   Cadence  Project listed below are developed with Cadence:   SpirocA board -- database/hardware/HPE-SPIROCA-256-LHCB  Laser Driver board -- database/hardware/LaserDriver  PACIFIC board",
            "title": "1.1 Development Tools &amp; Projects"
        },
        {
            "location": "/Development_Process/#-firmware-",
            "text": "",
            "title": "--------------Firmware--------------"
        },
        {
            "location": "/Development_Process/#21-development-tools",
            "text": "HDL Designer 2012.1  Download link:  HDS_2012_1  Quartus 12.0  Download link  Quartus_12_0",
            "title": "2.1 Development Tools"
        },
        {
            "location": "/Development_Process/#21-development-process",
            "text": "Edit Source Code  Download the souce code from https://bitbucket.org/   Make a new directory D:\\NewUSBBoard  cd D:\\NewUSBBoard  git clone https://lihm09@bitbucket.org/XiaoxueHAN/usbboard_firmware.git firmware  Set the environment variables  Run D:\\NewUSBBoard\\firmware\\Setup_Env\\SET_ENV_VAR.bat as Administrator.  Edit source code in the HDL Designer.   Synthesis in HDL Designer  USB_Board_TOP_tb- struct- U_0 is the top file of the project. \nUSB_Board_TOP_tb- struct- U_1 is the testbench, which can only be used for simulating.   In \u201cFPGA Technology Setup\u201d choose the options:  In \"FPGA Synthesis Settings\" choose the options:  Choose U_0 and click \u201cGenerate and runs the entires Quartus QIS Synthesis flow\u201d to synthesis the project, then wait for Synthesis completed.  Implementation in Quartus    Open Quartus and the project file PEBSino_USB_Board\\qis\\@u@s@b_@board_@t@o@p_struct\\USB_Board_TOP.qpf .    Run the command below in the Tcl console, the file will set the type of the device and all the pin planning   constrains.   source USB_Board_TOP.tcl     Start compilation.    Program the FPGA   Use JTAG and *.sof to program the FPGA for preliminary tests.  Use ISP interface to program the flash    Use \"Convert Programming Files\" to generate .jic file to program the flash \n(flash device is EPCS64, FPGA device is EP4CE75F23I8L)    The FPGA can also be programed using the software tools through QuickUSB module. \nUse  hdReadoutTest ... -f  to program the FPGA. (More details, try  hdReadoutTest -h )",
            "title": "2.1 Development Process"
        },
        {
            "location": "/Development_Process/#-software-",
            "text": "",
            "title": "--------------Software--------------"
        },
        {
            "location": "/Development_Process/#31-development-tools-chains",
            "text": "Operation System:   ubuntu 12.04.3 amd64     Pre-install Software:   git, g++, qt4, libusb, dkpg, make, gcc, binutils, libx11, libxpm, libxft, libxext, qt4, libusb  sudo apt-get install git dpkg-dev make g++ gcc binutils libx11-dev libxpm-dev libxft-dev \\\nlibxext-dev libqt4-dev libusb-dev libaio.so.1  FFTW   download source code and unzip the file to /opt/    under /opt/fftw-3.3.4, run  ./configure  under /opt/fftw-3.3.4, run  ./make  under /opt/fftw-3.3.4, run  sudo ./make install     rootV5.34/32   download source code and unzip the file to /opt/    under /opt/root, run  sudo ./configure --enable-qt --with-fftw3-incdir=\"/opt/fftw-3.3.4/api\" --with-fftw3-libdir=\"/opt/fftw-3.3.4/.libs\"  under /opt/root run  sudo make     qtcreatorV2.8.1   Source Code    Download source code from bitbucket   git clone https://lihm09@bitbucket.org/RomanGreim/scifiusbboard.git        install the QuicUSB Driver   tar -xvf scifiusbboard/support/QuickUsbLibrary_v2.15.2_Linux.tar.gz  cd scifiusbboard/support/QuickUsbLibrary_v2.15.2_Linux  sudo ./install-linux.sh     Install libiowkit   cd scifiusbboard/utils/lisProgrammer/libiowkit  ./configure  make  sudo make install        Compilation   qmake  make",
            "title": "3.1 Development Tools &amp; Chains"
        },
        {
            "location": "/Development_Process/#32-qmake-project",
            "text": "*.pro/*.pri -- qmake project file  *.h -- header file  *.cpp -- cpp file  *.ui -- ui file, edited by qtcreator",
            "title": "3.2 Qmake project"
        },
        {
            "location": "/Operation_Manual/",
            "text": "-------------- Hardware ------------------\n\n\n1.1 Power Supply\n\n\nThe power supply of the NewUSBBoard is divided into:\n\n\n\n\nDigital power for the acquisition FPGA and USB interface +D3.3V (1A). This power supply is isolated from all other power supplies via magneto couplers.  \n\n\nAnalog power is different for different front-end board. Jumpers are used to select the exact type of FE board:  \n\n\n\n\nW1+W4 , 1\n2 in APWR_SET are connected -- VA64  \n\n\nW2+W5 , 1\n2 in APWR_SET are connected -- VA32  \n\n\nW3+W6 , 3\n4 in APWR_SET are connected -- SPIROC\n\n\n\n\n\n\n\n\n\n\n\n1.2 Important signals\n\n\nExternal Trigger \n Busy (piggyback board)\n\n\nThe middle pin of the jumpers \"NIM_TRIG\" and \"NIM_BUSY\" in piggyback board  are the TTL signals for TRIG_OUT and BUSY_OUT.\n\n\nExternal LED Pulse (piggyback board)\n\n\nThe middle pin of the jumper \"ADB_TP\" in piggyback board is the TTL Pulse for laser driver.\n\n\nAnalog signal from front-end board (NewUSBBoard)\n\n\nThe analog signal from front-end board is directly measured by ADC, and it can be also measured from the two pins of c59 on NewUSBBoard by oscilloscope. When the Spiroc works in normal mode, the analog signal is the peak value. And when the Spiroc works in trace mode, and without self-trigger signal, the analog signal is the actual waveforms after shaping.\n\n\nHold_B signal (Spiroc front-end board)\n\n\nTP10\n\n\n-------------- Firmware ------------------\n\n\n2.1 External vs Internal Trigger\n\n\nThe data acquisition is driven by a trigger signal which can be used and generated in two different ways.\n\n\nInternal Trigger\n\n\nA trigger is generated by the NewUSBBoard itself in this mode. It is usually used in the calibration.\nThe trigger is generated periodically. The variable period is controlled by \nselfTrigPeriod\n.\n\nUp on the generation of a internal trigger, a light injection pulse is send to the laser driver to inject light into the SiPM detectors and the readout sequence is ready to start. The width of the trigger pulse is changeable, determined by \nLI_phase_adj\n.\n\nTo get valid data, adjust the \nselfTrigLeadPeriod\n, \nholdDelayTime\n and \nfifoWriteDelay\n and make sure the equation shown in the Figure 2.3.1 is satisfied.\n\n\n\n\nFigure 2.3.1\n\n\n\n\nT1 is summed up to 120 ns composed of \n???\n ns NIM to TTL conversion, 6 ns digial isolators, 1.5ns TTL to LVDS conversion and so on...\n\n\nT2 = hold_delay_time * 25 ns\n\n\nT3 = self_trig_lead_time * 25 ns\n\n\nT4 unknown\n\n\nT5 peaking time of readout chip - for SpirocA 25 ~ 175ns\n\n\n\n\nExternal Trigger\n\n\nTypically in a test beam setup an external trigger is generated by some trigger logic used to generate the coincidence with traversing particles. This trigger is processed \u201dasynchronous\u201d to set the hold signal of the attached Front End modules via Up-Link control signals. The delay between trigger and hold signal is fixed(T1 in Figure 2.3.1), and it is strongly required to be as low as possible, since the total trigger delay between crossing particle and hold signal must be equal to the peaking time of readout chip in external trigger mode.\n\n\nUp on a trigger, the hold signal control on the Up-Link connector for all links is set to low (\n???ns\n delay) and the sampling sequence is started. During the sampling the Busy out signal is set high and new triggers during this time need to be gated in the trigger generation. Synchronization in the external trigger mode can be reached by sending at the beginning of the data acquisition a software Reset daq or a external Reset daq which resets all FIFOs and the readout finite state machine. A trigger counter is attached in the data which allows to collect synchronous data over several USB boards.\n\n\n2.2 Description of Global Registers\n\n\nA set of control and monitor registers are provided. Below a description of its functionality is given. All the registers are accessed in the high speed mode. For the access to the registers, two tools in the scifiusbboard/Builds/ are used:\n\n\n\n\n./readoutDebugtool -r reg_address\n\n\n./readoutDebugtool -w reg_address reg_value\n\n\n\n\nReg0, addr=0x0000, Fromt End Type \n Trigger Select Register\n\n\n\n\n\n\n\n\nBits\n\n\nAccess\n\n\nSignal Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n2..0\n\n\nR/W\n\n\nFE_Type\n\n\nSelect the Front-End card\n\n\n\n\n\n\n3\n\n\nR/W\n\n\nself_trigger_enable\n\n\n0: Enable external trigger \n1: Enable internal trigger\n\n\n\n\n\n\n4\n\n\nR/W\n\n\nled_enable\n\n\n0: Disable the laser driver \n1: Enable the laser driver\n\n\n\n\n\n\n15..5\n\n\nR/W\n\n\nReserved\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSignal Name\n\n\nValue\n\n\nFront-End card\n\n\nnumber of sampers per Up-link\n\n\n\n\n\n\n\n\n\n\nFE_Type\n\n\n0b000\n\n\nVA32\n\n\n128\n\n\n\n\n\n\nFE_Type\n\n\n0b001\n\n\nSPIROC_EPFL\n\n\n36\n\n\n\n\n\n\nFE_Type\n\n\n0b010\n\n\nSPIROC_Aachen\n\n\n128\n\n\n\n\n\n\nFE_Type\n\n\n0b011\n\n\nAMS_K_ladder\n\n\n6x64\n\n\n\n\n\n\nFE_Type\n\n\n0b100\n\n\nAMS_S_ladder\n\n\n5x64\n\n\n\n\n\n\nFE_Type\n\n\n0b101\n\n\nHPE_VA256\n\n\n256\n\n\n\n\n\n\nFE_Type\n\n\n0b110\n\n\nSPIROC_A\n\n\n64\n\n\n\n\n\n\nFE_Type\n\n\n0b111\n\n\nVATA64_EPFL\n\n\n64\n\n\n\n\n\n\n\n\nReg1, addr=0x0001, Reset DAQ Register\n\n\n\n\n\n\n\n\nBits\n\n\nAccess\n\n\nSignal Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nR/W\n\n\nreset_daq_reg\n\n\nReset the DAQ part of the board, including FIFOs and FSM.\n\n\n\n\n\n\n15..1\n\n\nR/W\n\n\nReserved\n\n\n\n\n\n\n\n\n\n\nReg2, addr=0x0002, Control Register\n\n\n\n\n\n\n\n\nBits\n\n\nAccess\n\n\nSignal Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nR/W\n\n\nFE_CLock_Mode\n\n\nSet Front-End Board Clock Mode??\n\n\n\n\n\n\n1\n\n\nR/W\n\n\nmanual_set_busy\n\n\n\u20190\u2019=normal operation ,\u20191\u2019=set the busy\ncan be used to test the busy connection or gate the trigger during setup\n\n\n\n\n\n\n15..2\n\n\nR/W\n\n\nReserved\n\n\n\n\n\n\n\n\n\n\nReg3,addr=0x0003, Fifo monitor register\n\n\n\n\n\n\n\n\nBits\n\n\nAccess\n\n\nSignal Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nR\n\n\nfifo_usedw(16)\n\n\n17th bit of Used word of the input FIFOs, it is the same for all FIFOs\n\n\n\n\n\n\n12..1\n\n\nR\n\n\nReserved\n\n\n\n\n\n\n\n\n13\n\n\nR\n\n\nfifo_almost_full\n\n\nIndicates that the FIFO can not receive any more events\n\n\n\n\n\n\n14\n\n\nR\n\n\nfifo_underflow\n\n\nfifo underflow\n\n\n\n\n\n\n15\n\n\nR\n\n\nfifo_overflow\n\n\nfifo overflow\n\n\n\n\n\n\n\n\nReg4,addr=0x0004, Fifo monitor register\n\n\n\n\n\n\n\n\nBits\n\n\nAccess\n\n\nSignal Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n15..0\n\n\nR\n\n\nfifo_usedw(15 to 0)\n\n\n0~15 bit of Used word of the input FIFOs, it is the same for all FIFOs\n\n\n\n\n\n\n\n\nReg5,addr=0x0005, Event ID monitor register\n\n\n\n\n\n\n\n\nBits\n\n\nAccess\n\n\nSignal Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n15..0\n\n\nR\n\n\nevent_ID\n\n\nThe Event ID counter at the current time.\nNote that this counter can increase very fast.\n\n\n\n\n\n\n\n\nReg6,addr=0x0006, Version monitor register\n\n\n\n\n\n\n\n\nBits\n\n\nAccess\n\n\nSignal Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0..7\n\n\nR\n\n\nFW_VERSION_DEFAULT\n\n\nNot Used???\n\n\n\n\n\n\n8..14\n\n\nR\n\n\nReserved\n\n\n\n\n\n\n\n\n15\n\n\nR\n\n\nDATA_TYPE\n\n\nNot Used???\n\n\n\n\n\n\n\n\nReg7,addr=0x0007, Fifo Write Delay register\n\n\n\n\n\n\n\n\nBits\n\n\nAccess\n\n\nSignal Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0..15\n\n\nR/W\n\n\nfifoWriteDelay\n\n\n\n\n\n\n\n\n\n\nReg8,addr=0x0008, Delay After Readout register\n\n\n\n\n\n\n\n\nBits\n\n\nAccess\n\n\nSignal Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0..15\n\n\nR/W\n\n\ndelay_after_readout\n\n\n\n\n\n\n\n\n\n\nReg9,addr=0x0009, Self Trigger Lead Time Register\n\n\n\n\n\n\n\n\nBits\n\n\nAccess\n\n\nSignal Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0..15\n\n\nR/W\n\n\nSELF_trig_lead_time(31 to 16)\n\n\n\n\n\n\n\n\n\n\nReg10,addr=0x000A, Self Trigger Lead Time Register\n\n\n\n\n\n\n\n\nBits\n\n\nAccess\n\n\nSignal Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0..15\n\n\nR/W\n\n\nSELF_trig_lead_time(15 to 0)\n\n\n\n\n\n\n\n\n\n\nReg11~Reg18, addr=0x000B ~ 0X0012, 8 data header registers\n\n\n\n\n\n\n\n\nBits\n\n\nAccess\n\n\nSignal Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0..15\n\n\nR/W\n\n\ndata_header\n\n\nstart from data_header(1)??\n Each Up-Link has its individual header word which is stored in one of the 8 registers\n\n\n\n\n\n\n\n\nReg19,addr=0x0013, Self Trigger Period register\n\n\n\n\n\n\n\n\nBits\n\n\nAccess\n\n\nSignal Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0..15\n\n\nR/W\n\n\nSELF_TRIG_PERIOD(31 to 16)\n\n\nSelf Trigger Period = Register Value * 25 ns\n\n\n\n\n\n\n\n\nReg20,addr=0x0014, Self Trigger Period register\n\n\n\n\n\n\n\n\nBits\n\n\nAccess\n\n\nSignal Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0..15\n\n\nR/W\n\n\nSELF_TRIG_PERIOD(15 to 0)\n\n\nSelf Trigger Period = Register Value * 25 ns\n\n\n\n\n\n\n\n\nReg21,addr=0x0015, QSPI register\n\n\n\n\n\n\n\n\nBits\n\n\nAccess\n\n\nSignal Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0..9\n\n\nR/W\n\n\nQSPI_start_addr\n\n\nQSPI start address\n\n\n\n\n\n\n10..13\n\n\nR/W\n\n\nReserved\n\n\n\n\n\n\n\n\n14\n\n\nR/W\n\n\nQSPI_repeat_enable\n\n\nQSPI repeat enable\n\n\n\n\n\n\n15\n\n\nR/W\n\n\nQSPI_busy\n\n\nQSPI busy\n\n\n\n\n\n\n\n\nReg22,addr=0x0016, QSPI register\n\n\n\n\n\n\n\n\nBits\n\n\nAccess\n\n\nSignal Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0..9\n\n\nR/W\n\n\nQSPI_end_addr\n\n\nQSPI end address\n\n\n\n\n\n\n10..15\n\n\nR/W\n\n\nReserved\n\n\n\n\n\n\n\n\n\n\nReg23,addr=0x0017, QSPI register\n\n\n\n\n\n\n\n\nBits\n\n\nAccess\n\n\nSignal Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0..11\n\n\nR/W\n\n\nQMR(11 to 0)\n\n\nQMR???\n\n\n\n\n\n\n12\n\n\nR/W\n\n\nReserved\n\n\n\n\n\n\n\n\n12..15\n\n\nR/W\n\n\nQMR(15 to 13)\n\n\nQMR???\n\n\n\n\n\n\n\n\nReg24,addr=0x0018, QSPI register\n\n\n\n\n\n\n\n\nBits\n\n\nAccess\n\n\nSignal Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0..15\n\n\nR/W\n\n\nQDLYR\n\n\nQDLYR???\n\n\n\n\n\n\n\n\nReg25,addr=0x0019, Bias Voltage 1 SPI control register\n\n\n\n\n\n\n\n\nBits\n\n\nAccess\n\n\nSignal Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0..15\n\n\nR/W\n\n\nVB1_cTx\n\n\nSPI control register for Bias Voltage 1\n\n\n\n\n\n\n\n\nReg26,addr=0x001A, Bias Voltage 2 SPI control register\n\n\n\n\n\n\n\n\nBits\n\n\nAccess\n\n\nSignal Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0..15\n\n\nR/W\n\n\nVB2_cTx\n\n\nSPI control register for Bias Voltage 2\n\n\n\n\n\n\n\n\nReg27,addr=0x001B, Hold delay time register\n\n\n\n\n\n\n\n\nBits\n\n\nAccess\n\n\nSignal Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0..15\n\n\nR/W\n\n\nhold_delay_time\n\n\nhold delay time\n\n\n\n\n\n\n\n\nReg28,addr=0x001C, Hold type register\n\n\n\n\n\n\n\n\nBits\n\n\nAccess\n\n\nSignal Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0..7\n\n\nR/W\n\n\nhold_type\n\n\nhold type\n\n\n\n\n\n\n7..15\n\n\nR/W\n\n\nReserved\n\n\n\n\n\n\n\n\n\n\nReg29,addr=0x001D, QSPI register\n\n\n\n\n\n\n\n\nBits\n\n\nAccess\n\n\nSignal Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0..15\n\n\nR/W\n\n\nQSPI_PERIOD(31 to 16)\n\n\nQSPI Period\n\n\n\n\n\n\n\n\nReg30,addr=0x001E, QSPI register\n\n\n\n\n\n\n\n\nBits\n\n\nAccess\n\n\nSignal Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0..15\n\n\nR/W\n\n\nQSPI_PERIOD(15 to 0)\n\n\nQSPI Period\n\n\n\n\n\n\n\n\nReg31,addr=0x001F, Light Injection I2C register\n\n\n\n\n\n\n\n\nBits\n\n\nAccess\n\n\nSignal Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nR/W\n\n\nLI_i2c_dis\n\n\n0:Light Injection Module Enable\n1:Light Injection Module Enable\n\n\n\n\n\n\n7...1\n\n\nR/W\n\n\nLI_i2c_slave_wr_adr\n\n\n1~7 bit of Light Injection Module I2C slave write address\n\n\n\n\n\n\n8...15\n\n\nR/W\n\n\nLI_i2c_slave_rd_adr\n\n\nLight Injection Module I2C slave read address = write address\n'0'\n\n\n\n\n\n\n\n\nReg32,addr=0x0020, Light Injection I2C register\n\n\n\n\n\n\n\n\nBits\n\n\nAccess\n\n\nSignal Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0..13\n\n\nR/W\n\n\nReserved\n\n\n\n\n\n\n\n\n14\n\n\nR/W\n\n\nLI_i2c_wr_done\n\n\n1: i2c write operation has finished.\n\n\n\n\n\n\n15\n\n\nR/W\n\n\nLI_i2c_err\n\n\n1: error happens during i2c operation\n\n\n\n\n\n\n\n\nReg33,addr=0x0021, Light Injection I2C register\n\n\n\n\n\n\n\n\nBits\n\n\nAccess\n\n\nSignal Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0..7\n\n\nR/W\n\n\nLI_i2c_reg_rd_dat\n\n\nThe value read by i2c operation\n\n\n\n\n\n\n8..13\n\n\nR/W\n\n\nReserved\n\n\n\n\n\n\n\n\n14\n\n\nR/W\n\n\nLI_i2c_err\n\n\n1: error happens during i2c operation\n\n\n\n\n\n\n15\n\n\nR/W\n\n\nLI_i2c_rd_done\n\n\n1: i2c read operation has finished.\n\n\n\n\n\n\n\n\nReg34,addr=0x0022, Light Injection Pulse Width register\n\n\n\n\n\n\n\n\nBits\n\n\nAccess\n\n\nSignal Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0..7\n\n\nR/W\n\n\nLI_phase_adj\n\n\nAdjust the pulse width for the light injection module, need calibration\n\n\n\n\n\n\n8..13\n\n\nR/W\n\n\nReserved\n\n\n\n\n\n\n\n\n\n\nQSPI block address\n\n\n\n\n\n\n\n\nStart Address\n\n\nEnd Address\n\n\nSignal Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0x0400\n\n\n0x0800\n\n\nqspi_tx_rdback\n\n\n\n\n\n\n\n\n0x0800\n\n\n0x0C00\n\n\nqspi_cmd_rdback\n\n\n\n\n\n\n\n\n0x0C00\n\n\n0x1000\n\n\nqspi_rx_rdback\n\n\n\n\n\n\n\n\n\n\n---------------- software --------------------------\n\n\n3.1 cfgFile\n\n\nThe configure file of NewUSBBoard is the cfgFile/board+ID.cfg. It sets the values of many variables. These variables and their meanings are listed below:  \n\n\n\n\n\n\n\n\nvariable name\n\n\nbits\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npathToUsbBoardFirmware\n\n\n\n\npath to NewUsbBoard Firmware(*.rbf)\n\n\n\n\n\n\nusbBoardID\n\n\n\n\nBoard ID, comes from the QuickUSB ID. \nSee function boardID( ) in readout/UsbBoard.cpp.\n\n\n\n\n\n\nwithUplinkAdapter\n\n\n1\n\n\nUsbBoard with or without a V1-\nV3 uplink adapter, with = 1, without = 0. \nNot used in NewUsbBoard.\n\n\n\n\n\n\neventsPerAccess\n\n\n16\n\n\nNumber of events read from USB board per USB block transfer (restricted by FIFO buffer size).\n\n\n\n\n\n\nmodeSel\n\n\n3\n\n\nSelect mode to define the number of samples readout from the front end card, the same variable with FE_Type in firmware.\n0=VA32\n1=SPIROC_EPFL\n2=SPIROC_Aachen\n3=AMS_K_ladder\n4=AMS_S_ladder\n5=HPE_VA256\n6=SPIROC_A\n7=VATA64_EPFL\n\n\n\n\n\n\nselfTrigEnable\n\n\n1\n\n\n1=self trigger mode\n0= external trigger mode\n\n\n\n\n\n\nselfTrigPeriod\n\n\n32\n\n\nnumber of 25ns clock cycles for the self trigger period.\n\n\n\n\n\n\nselfTrigLeadPeriod\n\n\n32\n\n\nnumber of 25ns clock cycles for the delay of trigger pulse to laser driver, which is designed for led calibration mode.\n\n\n\n\n\n\nledInjectionModeOn\n\n\n1\n\n\n0=Disable the laser driver\n1=enable the laser driver\n\n\n\n\n\n\nholdDelayTime\n\n\n16\n\n\nnumber of 25ns clock cycles delay between trigger and hold signal.\n\n\n\n\n\n\nholdType\n\n\n1\n\n\nSel on each uplink 1..8:\nfast hold time = 0 (no delay)\nslow hold time = 1 (insert holdDelayTime)\n\n\n\n\n\n\nuplinkID\n\n\n8\n\n\nMake uplinkID=boardID*10 + uplink_order for better understanding.\n\n\n\n\n\n\nuplinkUse\n\n\nstring\n\n\nJust a comment in software of the use for each uplink 1..8 void.(Don't use spaces)\n\n\n\n\n\n\ncalDelay\n\n\n\n\nnot used now\n\n\n\n\n\n\ndelayAfterReadout\n\n\n16\n\n\nNumber of 25ns clock cycles to wait after each event readout from the front end.\n\n\n\n\n\n\nclkSelect\n\n\n1\n\n\n0 = single clock sequence double\n1 = clock sequence readout\n\n\n\n\n\n\nfifoWriteDelay\n\n\n16\n\n\nSelect a 25ns clock cycle delay for the data valid at the input of the Fifos (delay to adjust with he sampling time of the ADC).\n\n\n\n\n\n\nbusyOutputSwitch\n\n\n1\n\n\nSet this bit to 1 to impose busy output 1, its to fake a busy state.\n\n\n\n\n\n\nbiasSelect\n\n\n8\n\n\nfor bias Voltage, \nnot used now\n\n\n\n\n\n\nbiasVoltage\n\n\nfloat\n\n\nfor bias Voltage, \nnot used now\n\n\n\n\n\n\nfrontEndBoardType\n\n\n3\n\n\nchoose the right frontEnd board type and use the corresponding configure file to configure it.\nnot used now\n.\nUse \nSpirocSlowControl\n to configure the SpirocA board\n\n\n\n\n\n\nexecuteFrontEndBoardConfiguration\n\n\n1\n\n\nexecute Configuration for each uplink: 0 do not configure, 1 configure\n\n\n\n\n\n\nadjustDACMode\n\n\n1\n\n\nnot used now\n\n\n\n\n\n\n\n\n3.2 Utils\n\n\nThe bin files are under \n./Builds\n, while the souce code are under \n./utils\n.\n\n\nReadout Test System\n\n\n\n\n\n\nreadoutDebugtool\n -- read and write the global registers in the firmware  \n\n\n\n\nreadoutDebugtool -r reg_address\n\n\nreadoutDebugtool -w reg_address reg_value\n\n\n\n\n\n\n\n\nadcView\n -- Start the readout sequence. Readout and display the resultes in real time.\n\n\n\n\nreadoutTest\n -- Start the readout sequence and readout pre-defined number of events before stop.\n\n\nlis_piggyback\n -- Configure the laser driver holding on the piggyback board.\n\n\nSpirocSlowControl\n -- Configure the SPIROC board.\n\n\n\n\nData Analysis System\n\n\n\n\nnoiseAnalysis\n\n\nrawAnalysis\n\n\n\n\n3.3 Data Acquisition Procedure\n\n\n3.3.1 Set Proper Parameters (only do it once)\n\n\nThe following parameters should be considered to get the single proton signal:  \n\n\n\n\nself_trig_lead_time (selfTrigLeadPeriod)\n\n\nhold_delay_time (holdDelayTime)\n\n\n\n\nHOW TO SET PROPER PARAMETERS:  \n\n\n\n\nMeasure the delay between self-trigger and hold_B (TP10 in SpirocA front-end board)  \n\n\nMeasure the delay between self-trigger and actual analog output of front-end board (two pins of c59, SpirocA works in trace mode)  \n\n\nadjust the holdDelayTime and selfTrigPeriod to make these two signals in alignment.  \n\n\n\n\n3.3.2 Configure the SpirocA\n\n\nUse SpirocSlowControl to configure the SpirocA:  \n\n\n\n\nUse Hold/hold_B rather than Trig.\n\n\nSet the DAC to 4.5v. (The actual BIAS Voltage of SiPM is \"BIAS - 4.5\") (only do itonce)\n\n\nSet the proper board ID and uplink.\n\n\n\n\nfor the first time:\n\n\n./spirocSlowControl -p ../cfgFiles/ -b board_ID -u uplink_order -d 0_0_0_0_0_0_0_0 -i 1\n\nfor the rest time:\n\n\n./spirocSlowControl -p ../cfgFiles/ -b board_ID -u uplink_order -i 1\n  \n\n\n\n\n-p : the directory of configure file\n\n\n-b : board ID\n\n\n-u : uplink order, starts from 0\n\n\n-i : Select the trigger, 1:Trigger from hold_B;0:Trigger from Trig\n\n\n\n\n3.3.3 Configure the laser driver\n\n\nUse lis_piggyback to configure the laser driver\n\n\n\n\n\n\n\n\nDiode\n\n\nAddress\n\n\nAmplitude\n\n\nBias current\n\n\nPre Amplitude\n\n\n\n\n\n\n\n\n\n\n4\n\n\n0x7e\n\n\n0x30=48\n\n\n0x02=2\n\n\n0xff=255\n\n\n\n\n\n\n\n\n3.3.4 Acquire the Pedestal\n\n\nUse adcView to acquire data.\n\n\n./adcView ../cfgFiles\n\n\n3.3.4 Set the BIAS (high Voltage)\n\n\nVoltage is 62V and Current Limit is 100uA.\n\nTypically the dark current is around 1uA when the LED doesn't work.\n\n\n3.3.5 Preliminary data acquisition\n\n\nUse adcView to acquire data.\n\n\n\n\n3.3.5 Record Data for Further Analysis\n\n\nUse hdReadoutTest or ReadoutTest.",
            "title": "Operation Manual"
        },
        {
            "location": "/Operation_Manual/#-hardware-",
            "text": "",
            "title": "-------------- Hardware ------------------"
        },
        {
            "location": "/Operation_Manual/#11-power-supply",
            "text": "The power supply of the NewUSBBoard is divided into:   Digital power for the acquisition FPGA and USB interface +D3.3V (1A). This power supply is isolated from all other power supplies via magneto couplers.    Analog power is different for different front-end board. Jumpers are used to select the exact type of FE board:     W1+W4 , 1 2 in APWR_SET are connected -- VA64    W2+W5 , 1 2 in APWR_SET are connected -- VA32    W3+W6 , 3 4 in APWR_SET are connected -- SPIROC",
            "title": "1.1 Power Supply"
        },
        {
            "location": "/Operation_Manual/#12-important-signals",
            "text": "External Trigger   Busy (piggyback board)  The middle pin of the jumpers \"NIM_TRIG\" and \"NIM_BUSY\" in piggyback board  are the TTL signals for TRIG_OUT and BUSY_OUT.  External LED Pulse (piggyback board)  The middle pin of the jumper \"ADB_TP\" in piggyback board is the TTL Pulse for laser driver.  Analog signal from front-end board (NewUSBBoard)  The analog signal from front-end board is directly measured by ADC, and it can be also measured from the two pins of c59 on NewUSBBoard by oscilloscope. When the Spiroc works in normal mode, the analog signal is the peak value. And when the Spiroc works in trace mode, and without self-trigger signal, the analog signal is the actual waveforms after shaping.  Hold_B signal (Spiroc front-end board)  TP10",
            "title": "1.2 Important signals"
        },
        {
            "location": "/Operation_Manual/#-firmware-",
            "text": "",
            "title": "-------------- Firmware ------------------"
        },
        {
            "location": "/Operation_Manual/#21-external-vs-internal-trigger",
            "text": "The data acquisition is driven by a trigger signal which can be used and generated in two different ways.  Internal Trigger  A trigger is generated by the NewUSBBoard itself in this mode. It is usually used in the calibration.\nThe trigger is generated periodically. The variable period is controlled by  selfTrigPeriod . \nUp on the generation of a internal trigger, a light injection pulse is send to the laser driver to inject light into the SiPM detectors and the readout sequence is ready to start. The width of the trigger pulse is changeable, determined by  LI_phase_adj . \nTo get valid data, adjust the  selfTrigLeadPeriod ,  holdDelayTime  and  fifoWriteDelay  and make sure the equation shown in the Figure 2.3.1 is satisfied.   Figure 2.3.1   T1 is summed up to 120 ns composed of  ???  ns NIM to TTL conversion, 6 ns digial isolators, 1.5ns TTL to LVDS conversion and so on...  T2 = hold_delay_time * 25 ns  T3 = self_trig_lead_time * 25 ns  T4 unknown  T5 peaking time of readout chip - for SpirocA 25 ~ 175ns   External Trigger  Typically in a test beam setup an external trigger is generated by some trigger logic used to generate the coincidence with traversing particles. This trigger is processed \u201dasynchronous\u201d to set the hold signal of the attached Front End modules via Up-Link control signals. The delay between trigger and hold signal is fixed(T1 in Figure 2.3.1), and it is strongly required to be as low as possible, since the total trigger delay between crossing particle and hold signal must be equal to the peaking time of readout chip in external trigger mode.  Up on a trigger, the hold signal control on the Up-Link connector for all links is set to low ( ???ns  delay) and the sampling sequence is started. During the sampling the Busy out signal is set high and new triggers during this time need to be gated in the trigger generation. Synchronization in the external trigger mode can be reached by sending at the beginning of the data acquisition a software Reset daq or a external Reset daq which resets all FIFOs and the readout finite state machine. A trigger counter is attached in the data which allows to collect synchronous data over several USB boards.",
            "title": "2.1 External vs Internal Trigger"
        },
        {
            "location": "/Operation_Manual/#22-description-of-global-registers",
            "text": "A set of control and monitor registers are provided. Below a description of its functionality is given. All the registers are accessed in the high speed mode. For the access to the registers, two tools in the scifiusbboard/Builds/ are used:   ./readoutDebugtool -r reg_address  ./readoutDebugtool -w reg_address reg_value   Reg0, addr=0x0000, Fromt End Type   Trigger Select Register     Bits  Access  Signal Name  Description      2..0  R/W  FE_Type  Select the Front-End card    3  R/W  self_trigger_enable  0: Enable external trigger  1: Enable internal trigger    4  R/W  led_enable  0: Disable the laser driver  1: Enable the laser driver    15..5  R/W  Reserved         Signal Name  Value  Front-End card  number of sampers per Up-link      FE_Type  0b000  VA32  128    FE_Type  0b001  SPIROC_EPFL  36    FE_Type  0b010  SPIROC_Aachen  128    FE_Type  0b011  AMS_K_ladder  6x64    FE_Type  0b100  AMS_S_ladder  5x64    FE_Type  0b101  HPE_VA256  256    FE_Type  0b110  SPIROC_A  64    FE_Type  0b111  VATA64_EPFL  64     Reg1, addr=0x0001, Reset DAQ Register     Bits  Access  Signal Name  Description      0  R/W  reset_daq_reg  Reset the DAQ part of the board, including FIFOs and FSM.    15..1  R/W  Reserved      Reg2, addr=0x0002, Control Register     Bits  Access  Signal Name  Description      0  R/W  FE_CLock_Mode  Set Front-End Board Clock Mode??    1  R/W  manual_set_busy  \u20190\u2019=normal operation ,\u20191\u2019=set the busy can be used to test the busy connection or gate the trigger during setup    15..2  R/W  Reserved      Reg3,addr=0x0003, Fifo monitor register     Bits  Access  Signal Name  Description      0  R  fifo_usedw(16)  17th bit of Used word of the input FIFOs, it is the same for all FIFOs    12..1  R  Reserved     13  R  fifo_almost_full  Indicates that the FIFO can not receive any more events    14  R  fifo_underflow  fifo underflow    15  R  fifo_overflow  fifo overflow     Reg4,addr=0x0004, Fifo monitor register     Bits  Access  Signal Name  Description      15..0  R  fifo_usedw(15 to 0)  0~15 bit of Used word of the input FIFOs, it is the same for all FIFOs     Reg5,addr=0x0005, Event ID monitor register     Bits  Access  Signal Name  Description      15..0  R  event_ID  The Event ID counter at the current time. Note that this counter can increase very fast.     Reg6,addr=0x0006, Version monitor register     Bits  Access  Signal Name  Description      0..7  R  FW_VERSION_DEFAULT  Not Used???    8..14  R  Reserved     15  R  DATA_TYPE  Not Used???     Reg7,addr=0x0007, Fifo Write Delay register     Bits  Access  Signal Name  Description      0..15  R/W  fifoWriteDelay      Reg8,addr=0x0008, Delay After Readout register     Bits  Access  Signal Name  Description      0..15  R/W  delay_after_readout      Reg9,addr=0x0009, Self Trigger Lead Time Register     Bits  Access  Signal Name  Description      0..15  R/W  SELF_trig_lead_time(31 to 16)      Reg10,addr=0x000A, Self Trigger Lead Time Register     Bits  Access  Signal Name  Description      0..15  R/W  SELF_trig_lead_time(15 to 0)      Reg11~Reg18, addr=0x000B ~ 0X0012, 8 data header registers     Bits  Access  Signal Name  Description      0..15  R/W  data_header  start from data_header(1)??  Each Up-Link has its individual header word which is stored in one of the 8 registers     Reg19,addr=0x0013, Self Trigger Period register     Bits  Access  Signal Name  Description      0..15  R/W  SELF_TRIG_PERIOD(31 to 16)  Self Trigger Period = Register Value * 25 ns     Reg20,addr=0x0014, Self Trigger Period register     Bits  Access  Signal Name  Description      0..15  R/W  SELF_TRIG_PERIOD(15 to 0)  Self Trigger Period = Register Value * 25 ns     Reg21,addr=0x0015, QSPI register     Bits  Access  Signal Name  Description      0..9  R/W  QSPI_start_addr  QSPI start address    10..13  R/W  Reserved     14  R/W  QSPI_repeat_enable  QSPI repeat enable    15  R/W  QSPI_busy  QSPI busy     Reg22,addr=0x0016, QSPI register     Bits  Access  Signal Name  Description      0..9  R/W  QSPI_end_addr  QSPI end address    10..15  R/W  Reserved      Reg23,addr=0x0017, QSPI register     Bits  Access  Signal Name  Description      0..11  R/W  QMR(11 to 0)  QMR???    12  R/W  Reserved     12..15  R/W  QMR(15 to 13)  QMR???     Reg24,addr=0x0018, QSPI register     Bits  Access  Signal Name  Description      0..15  R/W  QDLYR  QDLYR???     Reg25,addr=0x0019, Bias Voltage 1 SPI control register     Bits  Access  Signal Name  Description      0..15  R/W  VB1_cTx  SPI control register for Bias Voltage 1     Reg26,addr=0x001A, Bias Voltage 2 SPI control register     Bits  Access  Signal Name  Description      0..15  R/W  VB2_cTx  SPI control register for Bias Voltage 2     Reg27,addr=0x001B, Hold delay time register     Bits  Access  Signal Name  Description      0..15  R/W  hold_delay_time  hold delay time     Reg28,addr=0x001C, Hold type register     Bits  Access  Signal Name  Description      0..7  R/W  hold_type  hold type    7..15  R/W  Reserved      Reg29,addr=0x001D, QSPI register     Bits  Access  Signal Name  Description      0..15  R/W  QSPI_PERIOD(31 to 16)  QSPI Period     Reg30,addr=0x001E, QSPI register     Bits  Access  Signal Name  Description      0..15  R/W  QSPI_PERIOD(15 to 0)  QSPI Period     Reg31,addr=0x001F, Light Injection I2C register     Bits  Access  Signal Name  Description      0  R/W  LI_i2c_dis  0:Light Injection Module Enable 1:Light Injection Module Enable    7...1  R/W  LI_i2c_slave_wr_adr  1~7 bit of Light Injection Module I2C slave write address    8...15  R/W  LI_i2c_slave_rd_adr  Light Injection Module I2C slave read address = write address '0'     Reg32,addr=0x0020, Light Injection I2C register     Bits  Access  Signal Name  Description      0..13  R/W  Reserved     14  R/W  LI_i2c_wr_done  1: i2c write operation has finished.    15  R/W  LI_i2c_err  1: error happens during i2c operation     Reg33,addr=0x0021, Light Injection I2C register     Bits  Access  Signal Name  Description      0..7  R/W  LI_i2c_reg_rd_dat  The value read by i2c operation    8..13  R/W  Reserved     14  R/W  LI_i2c_err  1: error happens during i2c operation    15  R/W  LI_i2c_rd_done  1: i2c read operation has finished.     Reg34,addr=0x0022, Light Injection Pulse Width register     Bits  Access  Signal Name  Description      0..7  R/W  LI_phase_adj  Adjust the pulse width for the light injection module, need calibration    8..13  R/W  Reserved      QSPI block address     Start Address  End Address  Signal Name  Description      0x0400  0x0800  qspi_tx_rdback     0x0800  0x0C00  qspi_cmd_rdback     0x0C00  0x1000  qspi_rx_rdback",
            "title": "2.2 Description of Global Registers"
        },
        {
            "location": "/Operation_Manual/#-software-",
            "text": "",
            "title": "---------------- software --------------------------"
        },
        {
            "location": "/Operation_Manual/#31-cfgfile",
            "text": "The configure file of NewUSBBoard is the cfgFile/board+ID.cfg. It sets the values of many variables. These variables and their meanings are listed below:       variable name  bits  Description      pathToUsbBoardFirmware   path to NewUsbBoard Firmware(*.rbf)    usbBoardID   Board ID, comes from the QuickUSB ID.  See function boardID( ) in readout/UsbBoard.cpp.    withUplinkAdapter  1  UsbBoard with or without a V1- V3 uplink adapter, with = 1, without = 0.  Not used in NewUsbBoard.    eventsPerAccess  16  Number of events read from USB board per USB block transfer (restricted by FIFO buffer size).    modeSel  3  Select mode to define the number of samples readout from the front end card, the same variable with FE_Type in firmware. 0=VA32 1=SPIROC_EPFL 2=SPIROC_Aachen 3=AMS_K_ladder 4=AMS_S_ladder 5=HPE_VA256 6=SPIROC_A 7=VATA64_EPFL    selfTrigEnable  1  1=self trigger mode 0= external trigger mode    selfTrigPeriod  32  number of 25ns clock cycles for the self trigger period.    selfTrigLeadPeriod  32  number of 25ns clock cycles for the delay of trigger pulse to laser driver, which is designed for led calibration mode.    ledInjectionModeOn  1  0=Disable the laser driver 1=enable the laser driver    holdDelayTime  16  number of 25ns clock cycles delay between trigger and hold signal.    holdType  1  Sel on each uplink 1..8: fast hold time = 0 (no delay) slow hold time = 1 (insert holdDelayTime)    uplinkID  8  Make uplinkID=boardID*10 + uplink_order for better understanding.    uplinkUse  string  Just a comment in software of the use for each uplink 1..8 void.(Don't use spaces)    calDelay   not used now    delayAfterReadout  16  Number of 25ns clock cycles to wait after each event readout from the front end.    clkSelect  1  0 = single clock sequence double 1 = clock sequence readout    fifoWriteDelay  16  Select a 25ns clock cycle delay for the data valid at the input of the Fifos (delay to adjust with he sampling time of the ADC).    busyOutputSwitch  1  Set this bit to 1 to impose busy output 1, its to fake a busy state.    biasSelect  8  for bias Voltage,  not used now    biasVoltage  float  for bias Voltage,  not used now    frontEndBoardType  3  choose the right frontEnd board type and use the corresponding configure file to configure it. not used now . Use  SpirocSlowControl  to configure the SpirocA board    executeFrontEndBoardConfiguration  1  execute Configuration for each uplink: 0 do not configure, 1 configure    adjustDACMode  1  not used now",
            "title": "3.1 cfgFile"
        },
        {
            "location": "/Operation_Manual/#32-utils",
            "text": "The bin files are under  ./Builds , while the souce code are under  ./utils .  Readout Test System    readoutDebugtool  -- read and write the global registers in the firmware     readoutDebugtool -r reg_address  readoutDebugtool -w reg_address reg_value     adcView  -- Start the readout sequence. Readout and display the resultes in real time.   readoutTest  -- Start the readout sequence and readout pre-defined number of events before stop.  lis_piggyback  -- Configure the laser driver holding on the piggyback board.  SpirocSlowControl  -- Configure the SPIROC board.   Data Analysis System   noiseAnalysis  rawAnalysis",
            "title": "3.2 Utils"
        },
        {
            "location": "/Operation_Manual/#33-data-acquisition-procedure",
            "text": "3.3.1 Set Proper Parameters (only do it once)  The following parameters should be considered to get the single proton signal:     self_trig_lead_time (selfTrigLeadPeriod)  hold_delay_time (holdDelayTime)   HOW TO SET PROPER PARAMETERS:     Measure the delay between self-trigger and hold_B (TP10 in SpirocA front-end board)    Measure the delay between self-trigger and actual analog output of front-end board (two pins of c59, SpirocA works in trace mode)    adjust the holdDelayTime and selfTrigPeriod to make these two signals in alignment.     3.3.2 Configure the SpirocA  Use SpirocSlowControl to configure the SpirocA:     Use Hold/hold_B rather than Trig.  Set the DAC to 4.5v. (The actual BIAS Voltage of SiPM is \"BIAS - 4.5\") (only do itonce)  Set the proper board ID and uplink.   for the first time:  ./spirocSlowControl -p ../cfgFiles/ -b board_ID -u uplink_order -d 0_0_0_0_0_0_0_0 -i 1 \nfor the rest time:  ./spirocSlowControl -p ../cfgFiles/ -b board_ID -u uplink_order -i 1      -p : the directory of configure file  -b : board ID  -u : uplink order, starts from 0  -i : Select the trigger, 1:Trigger from hold_B;0:Trigger from Trig   3.3.3 Configure the laser driver  Use lis_piggyback to configure the laser driver     Diode  Address  Amplitude  Bias current  Pre Amplitude      4  0x7e  0x30=48  0x02=2  0xff=255     3.3.4 Acquire the Pedestal  Use adcView to acquire data.  ./adcView ../cfgFiles  3.3.4 Set the BIAS (high Voltage)  Voltage is 62V and Current Limit is 100uA. \nTypically the dark current is around 1uA when the LED doesn't work.  3.3.5 Preliminary data acquisition  Use adcView to acquire data.   3.3.5 Record Data for Further Analysis  Use hdReadoutTest or ReadoutTest.",
            "title": "3.3 Data Acquisition Procedure"
        },
        {
            "location": "/BugIssues_FreqAsks/",
            "text": "Hardware Problem\n\n\nOne Blue NewUSBBoard\n\n\nOne Blue NewUSBBoard doesn't work well. The situation is:\n\n1. The FPGA cannot be programed by flash when USB is plugged in. But it can be programed by the host computer through QuickUSB module.\n\n2. The ADC readout value is strange. It has two separate peaks with front-end board when SiPM is not working.\n\n3. The voltage to Front-end board is 3.6v. It should be 3.3v?\n\n\nPiggyback board DIS Signal\n\n\nTwo resistors related to the DIS signal for Light Injection Module on piggyback board should be replaced.\n\nThese two resistors is divider resistors used to make the 3.3V signal down to 1.5v.\n\nAs there is a resistor on the Light Injection board in parallel with DIS signal, the value of these two divider resistors should be changed.\n\n\nFirmware Problem\n\n\nI2C module\n\n\nSometimes the I2C module doesn't work well between two compilation. This is caused by the intermediate files. Before recompiling the HDL Designer Project, remove all the intermediate files which are db(directory), simulation(directory), incremental_db(directory).\n\n\nSoftware Problem\n\n\nDATA from FIFO to USB\n\n\nThe number of events which USB reads from the FPGA FIFO each time should be reconsidered.\n\n\nadcView or other data acquisition tools\n\n\nThe adcView or other data acquisition tools should consider the process protection. When the computer is busy, the adcView always stops at a random place.",
            "title": "Bug Issues & Freq Asks"
        },
        {
            "location": "/BugIssues_FreqAsks/#hardware-problem",
            "text": "One Blue NewUSBBoard  One Blue NewUSBBoard doesn't work well. The situation is: \n1. The FPGA cannot be programed by flash when USB is plugged in. But it can be programed by the host computer through QuickUSB module. \n2. The ADC readout value is strange. It has two separate peaks with front-end board when SiPM is not working. \n3. The voltage to Front-end board is 3.6v. It should be 3.3v?  Piggyback board DIS Signal  Two resistors related to the DIS signal for Light Injection Module on piggyback board should be replaced. \nThese two resistors is divider resistors used to make the 3.3V signal down to 1.5v. \nAs there is a resistor on the Light Injection board in parallel with DIS signal, the value of these two divider resistors should be changed.",
            "title": "Hardware Problem"
        },
        {
            "location": "/BugIssues_FreqAsks/#firmware-problem",
            "text": "I2C module  Sometimes the I2C module doesn't work well between two compilation. This is caused by the intermediate files. Before recompiling the HDL Designer Project, remove all the intermediate files which are db(directory), simulation(directory), incremental_db(directory).",
            "title": "Firmware Problem"
        },
        {
            "location": "/BugIssues_FreqAsks/#software-problem",
            "text": "DATA from FIFO to USB  The number of events which USB reads from the FPGA FIFO each time should be reconsidered.  adcView or other data acquisition tools  The adcView or other data acquisition tools should consider the process protection. When the computer is busy, the adcView always stops at a random place.",
            "title": "Software Problem"
        },
        {
            "location": "/about/",
            "text": "The materials above are the summary of my three months great time in EPFL. I'm very happy to work with Snow, Guido, Axel, Oliver, Maris, Maxim, Bruce. Time always goes fast, and let this small site to keep the short but precious summer time in Swissland.",
            "title": "About"
        }
    ]
}